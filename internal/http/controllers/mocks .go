// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllers

import (
	"context"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTicketController creates a new instance of MockTicketController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTicketController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTicketController {
	mock := &MockTicketController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTicketController is an autogenerated mock type for the TicketController type
type MockTicketController struct {
	mock.Mock
}

type MockTicketController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTicketController) EXPECT() *MockTicketController_Expecter {
	return &MockTicketController_Expecter{mock: &_m.Mock}
}

// AssignTo provides a mock function for the type MockTicketController
func (_mock *MockTicketController) AssignTo(ctx context.Context, c *gin.Context) {
	_mock.Called(ctx, c)
	return
}

// MockTicketController_AssignTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTo'
type MockTicketController_AssignTo_Call struct {
	*mock.Call
}

// AssignTo is a helper method to define mock.On call
//   - ctx context.Context
//   - c *gin.Context
func (_e *MockTicketController_Expecter) AssignTo(ctx interface{}, c interface{}) *MockTicketController_AssignTo_Call {
	return &MockTicketController_AssignTo_Call{Call: _e.mock.On("AssignTo", ctx, c)}
}

func (_c *MockTicketController_AssignTo_Call) Run(run func(ctx context.Context, c *gin.Context)) *MockTicketController_AssignTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gin.Context
		if args[1] != nil {
			arg1 = args[1].(*gin.Context)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketController_AssignTo_Call) Return() *MockTicketController_AssignTo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTicketController_AssignTo_Call) RunAndReturn(run func(ctx context.Context, c *gin.Context)) *MockTicketController_AssignTo_Call {
	_c.Run(run)
	return _c
}

// CreateTicket provides a mock function for the type MockTicketController
func (_mock *MockTicketController) CreateTicket(ctx context.Context, c *gin.Context) {
	_mock.Called(ctx, c)
	return
}

// MockTicketController_CreateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTicket'
type MockTicketController_CreateTicket_Call struct {
	*mock.Call
}

// CreateTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - c *gin.Context
func (_e *MockTicketController_Expecter) CreateTicket(ctx interface{}, c interface{}) *MockTicketController_CreateTicket_Call {
	return &MockTicketController_CreateTicket_Call{Call: _e.mock.On("CreateTicket", ctx, c)}
}

func (_c *MockTicketController_CreateTicket_Call) Run(run func(ctx context.Context, c *gin.Context)) *MockTicketController_CreateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gin.Context
		if args[1] != nil {
			arg1 = args[1].(*gin.Context)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketController_CreateTicket_Call) Return() *MockTicketController_CreateTicket_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTicketController_CreateTicket_Call) RunAndReturn(run func(ctx context.Context, c *gin.Context)) *MockTicketController_CreateTicket_Call {
	_c.Run(run)
	return _c
}

// GetTicketDetails provides a mock function for the type MockTicketController
func (_mock *MockTicketController) GetTicketDetails(ctx context.Context, c *gin.Context) {
	_mock.Called(ctx, c)
	return
}

// MockTicketController_GetTicketDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketDetails'
type MockTicketController_GetTicketDetails_Call struct {
	*mock.Call
}

// GetTicketDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - c *gin.Context
func (_e *MockTicketController_Expecter) GetTicketDetails(ctx interface{}, c interface{}) *MockTicketController_GetTicketDetails_Call {
	return &MockTicketController_GetTicketDetails_Call{Call: _e.mock.On("GetTicketDetails", ctx, c)}
}

func (_c *MockTicketController_GetTicketDetails_Call) Run(run func(ctx context.Context, c *gin.Context)) *MockTicketController_GetTicketDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gin.Context
		if args[1] != nil {
			arg1 = args[1].(*gin.Context)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketController_GetTicketDetails_Call) Return() *MockTicketController_GetTicketDetails_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTicketController_GetTicketDetails_Call) RunAndReturn(run func(ctx context.Context, c *gin.Context)) *MockTicketController_GetTicketDetails_Call {
	_c.Run(run)
	return _c
}

// UdpateStatus provides a mock function for the type MockTicketController
func (_mock *MockTicketController) UdpateStatus(ctx context.Context, c *gin.Context) {
	_mock.Called(ctx, c)
	return
}

// MockTicketController_UdpateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UdpateStatus'
type MockTicketController_UdpateStatus_Call struct {
	*mock.Call
}

// UdpateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - c *gin.Context
func (_e *MockTicketController_Expecter) UdpateStatus(ctx interface{}, c interface{}) *MockTicketController_UdpateStatus_Call {
	return &MockTicketController_UdpateStatus_Call{Call: _e.mock.On("UdpateStatus", ctx, c)}
}

func (_c *MockTicketController_UdpateStatus_Call) Run(run func(ctx context.Context, c *gin.Context)) *MockTicketController_UdpateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *gin.Context
		if args[1] != nil {
			arg1 = args[1].(*gin.Context)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketController_UdpateStatus_Call) Return() *MockTicketController_UdpateStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTicketController_UdpateStatus_Call) RunAndReturn(run func(ctx context.Context, c *gin.Context)) *MockTicketController_UdpateStatus_Call {
	_c.Run(run)
	return _c
}
