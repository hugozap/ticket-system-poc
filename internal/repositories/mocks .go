// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"

	"example.com/ticket-system/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTicketRepository creates a new instance of MockTicketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTicketRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTicketRepository {
	mock := &MockTicketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTicketRepository is an autogenerated mock type for the TicketRepository type
type MockTicketRepository struct {
	mock.Mock
}

type MockTicketRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTicketRepository) EXPECT() *MockTicketRepository_Expecter {
	return &MockTicketRepository_Expecter{mock: &_m.Mock}
}

// BulkImport provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) BulkImport(ctx context.Context, entries []models.Ticket) error {
	ret := _mock.Called(ctx, entries)

	if len(ret) == 0 {
		panic("no return value specified for BulkImport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.Ticket) error); ok {
		r0 = returnFunc(ctx, entries)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTicketRepository_BulkImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkImport'
type MockTicketRepository_BulkImport_Call struct {
	*mock.Call
}

// BulkImport is a helper method to define mock.On call
//   - ctx context.Context
//   - entries []models.Ticket
func (_e *MockTicketRepository_Expecter) BulkImport(ctx interface{}, entries interface{}) *MockTicketRepository_BulkImport_Call {
	return &MockTicketRepository_BulkImport_Call{Call: _e.mock.On("BulkImport", ctx, entries)}
}

func (_c *MockTicketRepository_BulkImport_Call) Run(run func(ctx context.Context, entries []models.Ticket)) *MockTicketRepository_BulkImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.Ticket
		if args[1] != nil {
			arg1 = args[1].([]models.Ticket)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketRepository_BulkImport_Call) Return(err error) *MockTicketRepository_BulkImport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTicketRepository_BulkImport_Call) RunAndReturn(run func(ctx context.Context, entries []models.Ticket) error) *MockTicketRepository_BulkImport_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTicket provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) CreateTicket(ctx context.Context, ticket *models.Ticket) (string, error) {
	ret := _mock.Called(ctx, ticket)

	if len(ret) == 0 {
		panic("no return value specified for CreateTicket")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Ticket) (string, error)); ok {
		return returnFunc(ctx, ticket)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Ticket) string); ok {
		r0 = returnFunc(ctx, ticket)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.Ticket) error); ok {
		r1 = returnFunc(ctx, ticket)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTicketRepository_CreateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTicket'
type MockTicketRepository_CreateTicket_Call struct {
	*mock.Call
}

// CreateTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - ticket *models.Ticket
func (_e *MockTicketRepository_Expecter) CreateTicket(ctx interface{}, ticket interface{}) *MockTicketRepository_CreateTicket_Call {
	return &MockTicketRepository_CreateTicket_Call{Call: _e.mock.On("CreateTicket", ctx, ticket)}
}

func (_c *MockTicketRepository_CreateTicket_Call) Run(run func(ctx context.Context, ticket *models.Ticket)) *MockTicketRepository_CreateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Ticket
		if args[1] != nil {
			arg1 = args[1].(*models.Ticket)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketRepository_CreateTicket_Call) Return(s string, err error) *MockTicketRepository_CreateTicket_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTicketRepository_CreateTicket_Call) RunAndReturn(run func(ctx context.Context, ticket *models.Ticket) (string, error)) *MockTicketRepository_CreateTicket_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicket provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) GetTicket(ctx context.Context, id string) (*models.Ticket, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTicket")
	}

	var r0 *models.Ticket
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Ticket, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Ticket); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ticket)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTicketRepository_GetTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicket'
type MockTicketRepository_GetTicket_Call struct {
	*mock.Call
}

// GetTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTicketRepository_Expecter) GetTicket(ctx interface{}, id interface{}) *MockTicketRepository_GetTicket_Call {
	return &MockTicketRepository_GetTicket_Call{Call: _e.mock.On("GetTicket", ctx, id)}
}

func (_c *MockTicketRepository_GetTicket_Call) Run(run func(ctx context.Context, id string)) *MockTicketRepository_GetTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketRepository_GetTicket_Call) Return(ticket *models.Ticket, err error) *MockTicketRepository_GetTicket_Call {
	_c.Call.Return(ticket, err)
	return _c
}

func (_c *MockTicketRepository_GetTicket_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Ticket, error)) *MockTicketRepository_GetTicket_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketsAssignedTo provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) GetTicketsAssignedTo(ctx context.Context, userName string) ([]models.Ticket, error) {
	ret := _mock.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketsAssignedTo")
	}

	var r0 []models.Ticket
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]models.Ticket, error)); ok {
		return returnFunc(ctx, userName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []models.Ticket); ok {
		r0 = returnFunc(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Ticket)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTicketRepository_GetTicketsAssignedTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketsAssignedTo'
type MockTicketRepository_GetTicketsAssignedTo_Call struct {
	*mock.Call
}

// GetTicketsAssignedTo is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
func (_e *MockTicketRepository_Expecter) GetTicketsAssignedTo(ctx interface{}, userName interface{}) *MockTicketRepository_GetTicketsAssignedTo_Call {
	return &MockTicketRepository_GetTicketsAssignedTo_Call{Call: _e.mock.On("GetTicketsAssignedTo", ctx, userName)}
}

func (_c *MockTicketRepository_GetTicketsAssignedTo_Call) Run(run func(ctx context.Context, userName string)) *MockTicketRepository_GetTicketsAssignedTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketRepository_GetTicketsAssignedTo_Call) Return(tickets []models.Ticket, err error) *MockTicketRepository_GetTicketsAssignedTo_Call {
	_c.Call.Return(tickets, err)
	return _c
}

func (_c *MockTicketRepository_GetTicketsAssignedTo_Call) RunAndReturn(run func(ctx context.Context, userName string) ([]models.Ticket, error)) *MockTicketRepository_GetTicketsAssignedTo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssignTo provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) UpdateAssignTo(ctx context.Context, id string, assignTo string) error {
	ret := _mock.Called(ctx, id, assignTo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssignTo")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, assignTo)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTicketRepository_UpdateAssignTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssignTo'
type MockTicketRepository_UpdateAssignTo_Call struct {
	*mock.Call
}

// UpdateAssignTo is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - assignTo string
func (_e *MockTicketRepository_Expecter) UpdateAssignTo(ctx interface{}, id interface{}, assignTo interface{}) *MockTicketRepository_UpdateAssignTo_Call {
	return &MockTicketRepository_UpdateAssignTo_Call{Call: _e.mock.On("UpdateAssignTo", ctx, id, assignTo)}
}

func (_c *MockTicketRepository_UpdateAssignTo_Call) Run(run func(ctx context.Context, id string, assignTo string)) *MockTicketRepository_UpdateAssignTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTicketRepository_UpdateAssignTo_Call) Return(err error) *MockTicketRepository_UpdateAssignTo_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTicketRepository_UpdateAssignTo_Call) RunAndReturn(run func(ctx context.Context, id string, assignTo string) error) *MockTicketRepository_UpdateAssignTo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) UpdateStatus(ctx context.Context, id string, status string) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTicketRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockTicketRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - status string
func (_e *MockTicketRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *MockTicketRepository_UpdateStatus_Call {
	return &MockTicketRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *MockTicketRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id string, status string)) *MockTicketRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTicketRepository_UpdateStatus_Call) Return(err error) *MockTicketRepository_UpdateStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTicketRepository_UpdateStatus_Call) RunAndReturn(run func(ctx context.Context, id string, status string) error) *MockTicketRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTicket provides a mock function for the type MockTicketRepository
func (_mock *MockTicketRepository) UpdateTicket(ctx context.Context, ticket *models.Ticket) error {
	ret := _mock.Called(ctx, ticket)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicket")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Ticket) error); ok {
		r0 = returnFunc(ctx, ticket)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTicketRepository_UpdateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTicket'
type MockTicketRepository_UpdateTicket_Call struct {
	*mock.Call
}

// UpdateTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - ticket *models.Ticket
func (_e *MockTicketRepository_Expecter) UpdateTicket(ctx interface{}, ticket interface{}) *MockTicketRepository_UpdateTicket_Call {
	return &MockTicketRepository_UpdateTicket_Call{Call: _e.mock.On("UpdateTicket", ctx, ticket)}
}

func (_c *MockTicketRepository_UpdateTicket_Call) Run(run func(ctx context.Context, ticket *models.Ticket)) *MockTicketRepository_UpdateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Ticket
		if args[1] != nil {
			arg1 = args[1].(*models.Ticket)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTicketRepository_UpdateTicket_Call) Return(err error) *MockTicketRepository_UpdateTicket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTicketRepository_UpdateTicket_Call) RunAndReturn(run func(ctx context.Context, ticket *models.Ticket) error) *MockTicketRepository_UpdateTicket_Call {
	_c.Call.Return(run)
	return _c
}
